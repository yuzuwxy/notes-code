一、C++中字符串类型string的简单用法
    string 是 C++ 提供的字符串类，和 C 类型的字符串（char str[15]）相比，具有不限长度及其他优点，类似vector数组，可以方便的进行数据的增删改查，并可以进行排序交换与遍历。
    要使用 string， 必须包含头文件string，并包含std命名空间：
            #include<string>
            using namespace std;
    声明一个字符串变量：
            string str；
            或者：
            string str="hello";      //可以在声明时进行初始化
    要输出str的单个字符，可以与传统C的字符串一样采用下标运算str[i]的形式，也可以采用str.at(i)的形式。
    不同的是[]运算不会检查索引i是否越界，而at()函数会检查，使用无效时会抛出out_of_range异常。
    同时，string类型的字符串是不以'\0'结尾的，因此若str有三个字符，传统C语言的字符串的str[3]是字符'\0'，但是string类型的只能到str[2]，str[3]是没有定义的，而str. at(3)会提示越界奔溃。
            #include<string>
            #include<iostream>
            using namespace std;
            int main() {
	            string str="hello";
	            char ch[10]="hello";
	            cout<<ch[5]<<endl;
	            cout<<str[5]<<endl;
	            cout<<str.at(5)<<endl;
	            return 0;
            }
            输出：
    
    
            terminate called after throwing an instance of 'std::out_of_range'
             what():  basic_string::at
           //截图放不过来 ：桌面——>try——>1.
    其他简单函数：
        字符串长度    str.length()/str.size()/strlen(str)
        读取一行      getline(cin,str)        //读到回车
        赋值          str="hello";
                      strcpy(str1,str2)       //将str2字符串的内容复制到str1，包括字符串结束标志
        连接          str=str+"hello";
        比较字符串    str=="hello"
                     //字符串比较原理：两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇’\0’为止。
                                      当两个数的位数一样，则直接可以应用字符串的比较。如
                                                 123>111==true
                                        #include<iostream>
                                        #include<string>
                                        using namespace std;
                                        int main(){
                                            string str1("235");       //初始化的一种形式
                                            string str2("121");

                                            bool result;
                                            result = str1 > str2;
                                            cout<<result<<endl;         // 1：   235>121

                                            str1 = "1111";
                                            result = str1 > str2;
                                            cout<<result<<endl;         // 0      1111<121   简单的>、<、=只能比较长度相同的字符串

                                            str1 = "111";
                                            result = str1 > str2;
                                            cout<<result<<endl;         // 0

                                            return 0;
                                        }
    C++ string类提供了c_str()、data()和copy()这三个成员函数用于将C++字符串string转换为C字符串C_string，其
        c_str()     返回一个以'\0'结尾的字符数组
        data()      以字符数组的形式返回字符串内容但不添加'\0'
        copy()      字符串的内容复制或写入既有的c_string或字符数组内
                string str = "Hello World!";
                const char* p1 = str.c_str();
                const char* p2 = str.data();
                const char* p3=new char[10];
                str.copy(p3,5,0);
                        //函数原型：copy(char *s, int n, int pos = 0)
                        //把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目 
         //其实不咋懂这咋用，完了再说
        //用printf输出必须printf("%s",str.c_str());也不知道为啥
    string可以方便的改变字符串容量大小：
        string str="Hello";
        str.resize(3);        //只剩下Hel
    string可以很方便的查找字符串中的字符或者子串，其是通过成员函数find()和substr()实现的，
    find()函数是从str第3个位置查起，找到子串后，返回子串的位置；而substr函数从pos位置(子串开始的位置)开始，截取5个字符，赋值给str2，也就是说，str2的内容将是ssdfs。
        string str = "aaaaddddssdfsasdf";  
        size_t pos = str.find("ssdf", 3);//注意pos的数据类型string::size_type
                //如果没找到，返回一个特殊的标志npos
                // 可以用if(pos != string::npos)则表示找到。
        string str2 = str.substr(pos, 5);
