//比较神奇以前从来没看过（为啥我突然觉得字体变大了）
简介：
    可以理解为有个问题需要你解决，你通过输入某些东西表示你要问系统的问题，这时系统会回答你的问题。
    在代码中的回答方式就是会输入某个东西就是系统给你的答案，通过这些信息你可以得到问题的解。
    你是不可以自己测试的，只能提交给系统测试。
    //不太懂，看例题叭

第一道例题：
https://codeforces.com/contest/1167/problem/B
题意：一个包含6个元素的数字序列，进行不超过四次询问，询问内容为下标为i和j的两个数的乘积。输入的是答案，输出的是询问内容和可能的一个数字序列。
     噢英语也不太好，数字序列里的数字是定的，就是排列顺序不一样。
思路：好暴力啊这个题。
//还是有点东西
#include<bits/stdc++.h>

using namespace std;

#define ll long long
//交互，就是人机交互的交互
int a[6]={4,8,15,16,23,42};
int db[6];

int main() {
    for(int i=1;i<=4;i++) {
        printf("? %d %d\n",i,i+1);        //系统测试的时候，这里输出的数其实是向系统输入的数
        fflush(stdout);
        scanf("%d",&db[i]);               //这里输入的数实际是系统输出的数
    }

    do{
        if(a[0]*a[1]==db[1]&&a[1]*a[2]==db[2]&&a[2]*a[3]==db[3]&&
            a[3]*a[4]==db[4])
        break;
    }while(next_permutation(a,a+6));         //这个函数是库里的STL函数，全排列函数（根据字典序）。do{}while()相当于是固定格式
    printf("!");
    for(int i=0;i<6;i++) {
        printf(" %d",a[i]);
    }
    cout<<endl;
    return 0;
}
//啊我也不知道怎么说自己悟吧

第二道例题：
https://codeforces.com/problemset/problem/679/A
题意：在[2,100]之间有一个隐藏的数字想要知道是素数还是合数，可以进行最多20次询问。询问的方式是输入一个数然后回答输入的数是否是隐藏的数字的因子。所有询问完成之后回答这个数是素数还是合数。
思路：最多能问20次，那我就问20次肯定问的出来。判断是否是素数的方法一般是循环[2,sqrt(x)],如果有一个数可以整除就说明不是素数。然后仔细想想100开根号也不过是10，也许可以直接循环？
//试试
//试试就逝世。有问题。如果这个数是22以内的素数，那就是只有一个数可以被整除；如果是22以外的素数，那就没有数字可以被整除；如果在22以内只有一个因数的合数，也只有一个数被整除。所以遍历所有数计数不可行。
//没法用判断素数的方法跑那就用判断合数的方法跑。合数的性质就是可以写成若干个素数的乘积，也就是说如果是合数必然有一个素数是因子。那就问素数，如果有一个素数是因子，就说明不是。最多询问20次，找到20个素数：
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47，如果47是因数，那另一个最多是2到了96，97是质数，98有2,99有3，那就完了，问这么多应该就够了，试试。
