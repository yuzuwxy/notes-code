#include<iostream>
using namespace std;
#define MAXN 200      //筛出200以内的素数
bool pflag[MAXN];
int prime[MAXN]；  //int为0，bool为false
int topp=-1;   //位置
void init() {
	for (int i=2;i<MAXN;i++)   //不要等号，因为判别没有=，不然会把最后一个数包括进去
	{
		if (!pflag[i])   
			prime[++topp] = i;
		for (int j=0;j<=topp && prime[j]*i<MAXN;j++)
		{
			pflag[i*prime[j]] = true;     //相乘之后倍数一定不是质数，往后筛了好几位
			if (i%prime[j] == 0)break;   //6会被2和3筛，加上这一句可以使一个数只被一个质数筛掉，可以提高效率
			}
	}
	for (int i=0;i<=topp;i++)
		cout<<prime[i]<<endl;
}
 
int main()
{
	init();
}





//虽然不需要但是用了线性筛
#include<iostream>
#include<cstdio>
#include<bits/stdc++.h>
using namespace std;

#define MAXN 100010 
bool pflag[MAXN];
int prime[MAXN];
int topp=-1;

void init() {
	pflag[1]=true;
	for(int i=2;i<MAXN;i++) {
		if(!pflag[i]) prime[++topp]=i;
		for(int j=0;j<=topp&&prime[j]*i<MAXN;j++) {
			pflag[i*prime[j]]=true;
			if(i%prime[j]==0) break;
		}
	}
}

int main() {
	init();
	int n,x;
	cin>>n;
	int num[n+10];
	for(int i=1;i<=n;i++) {
		cin>>x;
		num[i]=x;
	}
	for(int i=1;i<=n;i++) {
		if(!pflag[num[i]]) printf("%d ",num[i]);
	}
	printf("\n");
	return 0;
}



//又水了一道线性筛！！
输入一个偶数 N(N<=10000)，验证4~N所有偶数是否符合哥德巴赫猜想：任一大于 2 的偶数都可写成两个质数之和。
如果一个数不止一种分法，则输出第一个加数相比其他分法最小的方案。例如 10，10=3+7=5+5，则 10=5+5 是错误答案。
#include<bits/stdc++.h>
#define MAXN 10010
using namespace std;

int prime[MAXN];
bool pflag[MAXN];
int topp=-1;

void pri(int n) {
	for(int i=2;i<n;i++) {
		if(!pflag[i]) prime[++topp]=i;
		for(int j=0;j<=topp&&prime[j]*i<n;j++) {
			pflag[prime[j]*i]=true;
			if(i%prime[j]==0) break;
		}
	}
	//for(int i=0;i<=topp;i++) cout<<prime[i]<<' ';
	//cout<<endl;
}

void func(int x) {
	for(int i=2;i<=x/2;i++) {
		if(!pflag[i]&&!pflag[x-i]) {
			printf("%d=%d+%d\n",x,i,x-i);
			break;
		}
	}
}

int main() {
	int n;
	scanf("%d",&n);
	pri(n);
	for(int i=4;i<=n;i+=2) {
		func(i);
	}
	return 0;
}	


//今日份的水
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath> 
#include<string>
#include<cstring>
#define MAXN 10005

using namespace std;

int pprime[10005];
int pflag[10005];
int topp=-1;

void prime() {
	for(int i=2;i<MAXN;i++) {
		if(!pflag[i]) pprime[++topp]=i;
		for(int j=0;j<=topp&&pprime[j]*i<MAXN;j++) {
			pflag[pprime[j]*i]=true;
			if(i%pprime[j]==0) break;
		}
	}
	//for(int i=0;i<=10;i++) {cout<<pflag[i]<<endl;}
}

int main() {
	prime();
	int a,b;
	scanf("%d%d",&a,&b);
	for(int k=a;k<=b;k++) {
		int i=k,cnt=k;
		if(!pflag[k]) printf("%d=%d\n",k,k);
		else {
			printf("%d=",i);
			//int sq=sqrt(i);
			for(int j=0;j<=topp&&pprime[j]<=cnt;j++)
				if(cnt%pprime[j]==0) {
					printf("%d",pprime[j]);
					cnt/=pprime[j];
					//cout<<1<<endl;
					break;
				}
			//cout<<endl<<cnt<<endl;
			for(int j=0;j<=topp&&pprime[j]<=cnt;j++) {
				//cout<<1<<endl;
				while(cnt%pprime[j]==0&&cnt!=1) {
					cnt/=pprime[j];
					//cout<<cnt<<' ';
					printf("*%d",pprime[j]);
				}
			}
			printf("\n");
		}
	}
	return 0;
}
