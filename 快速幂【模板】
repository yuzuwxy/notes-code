#include<bits/stdc++.h>
#define ll long long

using namespace std;

long long b,p,m;
long long ans=1;

ll read()
{
    int now=0;
    int flag=1;
    char s;
    while((s<'0'||s>'9')&&(s!='-')) s=getchar();
    if(s=='-') flag=-1,s=getchar();
    while(s>='0'&&s<='9')
    {
        now*=10;
        now+=s-'0';
        s=getchar();
    }
    now=now*flag;
    return now;
}

int main()
{ 
    b=read();
    p=read();
    m=read();
    long long a=b;
    long long q=p;
    while(p>0)
    {
        if(p&1)       //位运算，省时间，相当于p%2==1
         ans=ans*b%m;     //因为p直接除了2，如果是奇数，这里就是存一下因为奇数除2向下取整丢掉的1
        b=b*b%m;
        p=p>>1;    //同样是位运算省时间
    }
    if(p==0&&m==1)
    {
        ans=0;
    }
    printf("%lld^%lld mod %lld=%lld\n",a,q,m,ans);
    return 0;
}
//快速幂算法的核心思想就是每一步都把指数分成两半，而相应的底数做平方运算。这样不仅能把非常大的指数给不断变小，所需要执行的循环次数也变小，而最后表示的结果却一直不会变。

3^10=3*3*3*3*3*3*3*3*3*3

//尽量想办法把指数变小来，这里的指数为10

3^10=(3*3)*(3*3)*(3*3)*(3*3)*(3*3)

3^10=(3*3)^5

3^10=9^5

//此时指数由10缩减一半变成了5，而底数变成了原来的平方，求3^10原本需要执行10次循环操作，求9^5却只需要执行5次循环操作，但是3^10却等于9^5,
我们用一次（底数做平方操作）的操作减少了原本一半的循环量，特别是在幂特别大的时候效果非常好，例如2^10000=4^5000,底数只是做了一个小小的平方操作，
而指数就从10000变成了5000，减少了5000次的循环操作。

//现在我们的问题是如何把指数5变成原来的一半，5是一个奇数，5的一半是2.5，但是我们知道，指数不能为小数，因此我们不能这么简单粗暴的直接执行5/2，然而，这里还有另一种方法能表示9^5

9^5=（9^4）*（9^1）

//此时我们抽出了一个底数的一次方，这里即为9^1，这个9^1我们先单独移出来,剩下的9^4又能够在执行“缩指数”操作了，把指数缩小一半，底数执行平方操作

9^5=（81^2）*(9^1)

//把指数缩小一半，底数执行平方操作

9^5=（6561^1）*(9^1)

//此时，我们发现指数又变成了一个奇数1，按照上面对指数为奇数的操作方法，应该抽出了一个底数的一次方，这里即为6561^1，这个6561^1我们先单独移出来，但是此时指数却变成了0，
也就意味着我们无法再进行“缩指数”操作了。

9^5=（6561^0）*(9^1)*(6561^1)=1*(9^1)*(6561^1)=(9^1)*(6561^1)=9*6561=59049

我们能够发现，最后的结果是9*6561，而9是怎么产生的？是不是当指数为奇数5时，此时底数为9。那6561又是怎么产生的呢？
是不是当指数为奇数1时，此时的底数为6561。所以我们能发现一个规律：最后求出的幂结果实际上就是在变化过程中所有当指数为奇数时底数的乘积。

//我自己的AC快速幂

#include<iostream>
#include<cstdio>
#include<cmath>
#include<string>
#include<cstring>
#include<algorithm>
#include<time.h>
using namespace std;

long long FastPower(long long b,long long p,long long k) {
	if(p==0) {
		return 1%k;
	}
	int ans=1;
	while(p>0) {
//		int ans=1;
		if(p&1) {
			ans=ans*b%k;
		}
		p>>=1;
		b=b*b%k;
	}
	return ans;
}

int main(){
//	clock_t start,finish;
	long long b,p,k;
	scanf("%lld%lld%lld",&b,&p,&k);
//	int s;
	FastPower(b,p,k);
	printf("%lld^%lld mod %lld=%lld",b,p,k,FastPower(b,p,k));
//	cout<<double(finish-start)/CLOCKS_PER_SEC;
	return 0;
}
